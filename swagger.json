{
    "openapi": "3.0.0",
    "info": {
      "title": "Influence Hub Backend API Documentation",
      "description": "Back-end API instrunctions to Influence Hub application",
      "contact": {
        "name": "Rafael Ribeiro",
        "email": "rafittu@outlook.com"
      },
      "version": "1.0.0"
    },

    "paths": {
        "/admin/signup": {
            "post": {
                "summary": "Create admin user",
                "description": "Route to register new admin users.",
                "tags": ["Admin"],
                "requestBody": {
                    "content": {
                        "application/json": {                    
                            "schema": {
                                "$ref": "#/components/schemas/CreateAdmin"
                            },
                            "example": {
                                "name": "John Doe",
                                "email": "johndoe@email.com",
                                "password": "StrongP@assw0rd2024",
                                "passwordConfirmation": "StrongP@assw0rd2024"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Admin user created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/AdminInterface"
                                },
                                "example": {
                                "id": "1",
                                "name": "John Doe",
                                "email": "johndoe@email.com",
                                "createdAt": "2024-09-04T03:29:37.743Z",
                                "updatedAt": "2024-09-04T03:29:37.743Z"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/Error"
                            },
                            "example": {
                            "error": {
                                "message": ["One or more fields are missing or invalid"],
                                "code": "bad.request",
                                "status": true
                            },
                            "data": {}
                            }
                        }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "example1": {
                                        "summary": "field already in use by another user",
                                        "value": {
                                            "error": {
                                                "message": "['email'] already in use",
                                                "code": "admin-repository.createAdmin",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to create admin user",
                                            "code": "admin-service.createAdmin",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "user not created",
                                                "code": "admin-repository.createAdmin",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/admin/": {
            "get": {
                "summary": "List all admin users",
                "description": "Route to find and liast all admins.",
                "tags": ["Admin"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admins list",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/AdminInterfaceArray"
                                },
                                "example": [
                                    {
                                        "id": "1",
                                        "name": "John Doe",
                                        "email": "johndoe@email.com",
                                        "createdAt": "2024-09-04T03:29:37.743Z",
                                        "updatedAt": "2024-09-04T03:29:37.743Z"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to get admins",
                                            "code": "admin-service.findAllAdmins",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "could not get admins",
                                                "code": "admin-repository.findAllAdmins",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/admin/:id": {
            "get": {
                "summary": "Find admin by id",
                "description": "Route to find and liast an admin by id.",
                "tags": ["Admin"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "admin id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin data",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/AdminInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "John Doe",
                                    "email": "johndoe@email.com",
                                    "createdAt": "2024-09-04T03:29:37.743Z",
                                    "updatedAt": "2024-09-04T03:29:37.743Z"
                                }                                
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to get admin",
                                            "code": "admin-service.findOneAdmin",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "could not get admin",
                                                "code": "admin-repository.findOneAdmin",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/admin/:adminId": {
            "patch": {
                "summary": "Update admin",
                "description": "Route to update admin data",
                "tags": ["Admin"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {token}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "admin id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/UpdateAdmin"
                            },
                            "examples": {
                                "example1": {
                                    "summary": "Updating email",
                                    "value": {
                                        "email": "new-email@email.com"
                                    }
                                },
                                "example2": {
                                    "summary": "Updating password",
                                    "value": {
                                        "oldPassword": "@Mypassword123",
                                        "password": "newP@ssword321",
                                        "passwordConfirmation": "newP@ssword321"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Admin data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AdminInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "John Doe",
                                    "email": "new-email@email.com",
                                    "createdAt": "2024-09-04T03:29:37.743Z",
                                    "updatedAt": "2024-09-08T03:29:37.743Z"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
            
                                "examples": {
                                    "example1": {
                                        "summary": "invalid password confirmation",
                                        "value": {
                                            "error": {
                                                "message": "new passwords do not match",
                                                "code": "admin-service.updateAdmin",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "invalid old password",
                                        "value": {
                                            "error": {
                                                "message": "invalid old password",
                                                "code": "admin-service.updateAdmin",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to update admin",
                                            "code": "admin-service.updateAdmin",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "could not update admin data",
                                                "code": "admin-repository.updateAdmin",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/admin/remove/:id": {
            "delete": {
                "summary": "Delete admin",
                "description": "Route to delete an admin.",
                "tags": ["Admin"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "admin id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Admin data",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/AdminInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "John Doe",
                                    "email": "johndoe@email.com",
                                    "createdAt": "2024-09-04T03:29:37.743Z",
                                    "updatedAt": "2024-09-04T03:29:37.743Z"
                                }                                
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to delete admin",
                                            "code": "admin-service.deleteAdmin",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "could not delete admin",
                                                "code": "admin-repository.deleteAdmin",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },

        "/signin": {
            "post": {
                "summary": "User login",
                "description": "Authenticate a user with the provided credentials",
                "tags": ["Authentication"],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/UserCredentials"
                            },
                            "example": {
                            "email": "johndoe@email.com",
                            "password": "StrongP@assw0rd2024"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User authenticated successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserToken"
                                },
                                "example": {
                                    "accessToken": "eyJhbGciOiJ.eyJzdW5MDIyfQ.SflKxwk6yJV_adQssw5c"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                    "message": "email or password is invalid",
                                    "code": "local-auth.guards",
                                    "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Internal Server Error",
                                        "code": "internal.server.error",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "summary": "Get me",
                "description": "Route to get user by access token",
                "tags": ["Authentication"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accessToken}",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User payload",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserPayload"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "John Doe",
                                    "email": "johndoe@email.com"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    }
                }
            }
        },

        "/influencer/create": {
            "post": {
                "summary": "Create influencer user",
                "description": "Route to register new influencer.",
                "tags": ["Influencer"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                    "name": "Authorization",
                    "in": "header",
                    "required": true,
                    "description": "Bearer {accesToken}",
                    "schema": {
                        "type": "string"
                    }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {                    
                            "schema": {
                                "$ref": "#/components/schemas/CreateInfluencer"
                            },
                            "example": {
                                "name": "Ygona Moura",
                                "username": "ygona.moura",
                                "email": "ygona@email.com",
                                "niches": ["Artes", "Beleza & Maquiagem"],
                                "reach": 125000,
                                "photo": "https://example.photo.aws.com",
                                "zipCode": "12345678",
                                "street": "Ipê",
                                "number": "45"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Influencer created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/InfluencerInterface"
                                },
                                "example": {
                                "id": "1",
                                "name": "Ygona Moura",
                                "username": "ygona.moura",
                                "email": "ygona@email.com",
                                "niches": ["Artes", "Beleza & Maquiagem"],
                                "reach": "125000",
                                "photo": "https://example.photo.aws.com",
                                "address": {
                                    "street": "Ipê",
                                    "number": "45",
                                    "zipCode": "12345678",
                                    "city": "Belo Horizonte",
                                    "state": "MG"
                                },
                                "createdAt": "2024-09-05T03:29:37.743Z",
                                "updatedAt": "2024-09-05T03:29:37.743Z"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "example1": {
                                        "summary": "invalid field",
                                        "value": {
                                            "error": {
                                                "message": "One or more fields are missing or invalid",
                                                "code": "bad.request",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "invalid zipCode format",
                                        "value": {
                                            "error": {
                                                "message": "invalid zipcode format",
                                                "code": "influencer-service.createInfluencer",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example3": {
                                        "summary": "error fetching address",
                                        "value": {
                                            "error": {
                                                "message": "error fetching address from ViaCEP",
                                                "code": "create-influencer.getAddress",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "example1": {
                                        "summary": "field already in use by another user",
                                        "value": {
                                            "error": {
                                                "message": "['email', 'username'] already taken",
                                                "code": "influencer-repository.createInfluencer",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to create influencer",
                                            "code": "influencer-service.createInfluencer",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "influencer not created",
                                                "code": "influencer-repository.createInfluencer",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/influencer/all": {
            "get": {
                "summary": "Get all influencers",
                "description": "Route to find all influencers",
                "tags": ["Influencer"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                    "name": "Authorization",
                    "in": "header",
                    "required": true,
                    "description": "Bearer {accesToken}",
                    "schema": {
                        "type": "string"
                    }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Influencers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfluencersArray"
                                },
                                "example": [
                                    {
                                        "id": 1,
                                        "name": "Ygona Moura",
                                        "username": "ygona.moura",
                                        "email": "ygona@email.com",
                                        "reach": 125000,
                                        "photo": "https://example.photo.aws.com",
                                        "createdAt": "2024-09-05T03:29:37.743Z",
                                        "updatedAt": "2024-09-05T03:29:37.743Z"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
            
                                "examples": {
                                    "example1": {
                                        "summary": "service error",
                                        "value": {
                                            "error": {
                                                "message": "failed to get influencers",
                                                "code": "influencer-service.findAllInfluencer",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "repository error",
                                        "value": {
                                            "error": {
                                                "message": "could not get influencers",
                                                "code": "influencer-repository.findAllInfluencers",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    } 
                                }
                            }
                        }
                    }
                }
            }
        },
        "/influencer/filter": {
            "get": {
                "summary": "Get influencers by filter",
                "description": "Route to find influencers by filter",
                "tags": ["Influencer"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "reachMin",
                        "in": "query",
                        "description": "minimum reach",
                        "schema": {
                          "type": "string"
                        }
                    },
                    {
                        "name": "reachMax",
                        "in": "query",
                        "description": "maximun reach",
                        "schema": {
                          "type": "string"
                        }
                    },
                    {
                        "name": "city",
                        "in": "query",
                        "description": "influencer city",
                        "schema": {
                          "type": "string"
                        }
                    },
                    {
                        "name": "niche",
                        "in": "query",
                        "description": "influencer category",
                        "schema": {
                          "type": "array",
                          "items": {
                            "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Influencers",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfluencerInterfaceArray"
                                },
                                "example": [
                                    {
                                        "id": "1",
                                        "name": "Ygona Moura",
                                        "username": "ygona.moura",
                                        "email": "ygona@email.com",
                                        "niches": ["Artes", "Beleza & Maquiagem"],
                                        "reach": "125000",
                                        "photo": "https://example.photo.aws.com",
                                        "address": {
                                            "street": "Ipê",
                                            "number": "45",
                                            "zipCode": "12345678",
                                            "city": "Belo Horizonte",
                                            "state": "MG"
                                        },
                                        "createdAt": "2024-09-05T03:29:37.743Z",
                                        "updatedAt": "2024-09-05T03:29:37.743Z"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
            
                                "examples": {
                                    "example1": {
                                        "summary": "service error",
                                        "value": {
                                            "error": {
                                                "message": "failed to get influencers",
                                                "code": "influencer-service.findInfluencersByFilter",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "repository error",
                                        "value": {
                                            "error": {
                                                "message": "could not get influencers",
                                                "code": "influencer-repository.findInfluencersByFilter",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    } 
                                }
                            }
                        }
                    }
                }
            }
        },
        "/influencer/:influencerId": {
            "get": {
                "summary": "Find influencer by id",
                "description": "Route to find influencer by id.",
                "tags": ["Influencer"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "influencer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Influencer data",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/InfluencerInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "Ygona Moura",
                                    "username": "ygona",
                                    "email": "ygona@email.com",
                                    "niches": ["Beleza & Maquiagem", "Lifestyle"],
                                    "reach": "245987",
                                    "photo": "https://new-example.photo.aws.com",
                                    "address": {
                                        "street": "Ipê",
                                        "number": "45",
                                        "zipCode": "12345678",
                                        "city": "Belo Horizonte",
                                        "state": "MG"
                                    },
                                    "createdAt": "2024-09-05T03:29:37.743Z",
                                    "updatedAt": "2024-09-05T03:29:37.743Z"
                                }                                
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to get influencer data",
                                            "code": "influencer-service.findOneInfluencer",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "could not get influencer details",
                                                "code": "influencer-repository.findOneInfluencer",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/influencer/:id": {
            "patch": {
                "summary": "Update influencer",
                "description": "Route to update influencer data",
                "tags": ["Influencer"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {token}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "influencer id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                            "$ref": "#/components/schemas/UpdateInfluencer"
                            },
                            "examples": {
                                "example1": {
                                    "summary": "Updating influencer instagram data",
                                    "value": {
                                        "username": "ygona",
                                        "reach": "245987",
                                        "niches": ["Beleza & Maquiagem", "Lifestyle"]
                                    }
                                },
                                "example2": {
                                    "summary": "Updating influencer photo",
                                    "value": {
                                        "oldPhoto": "https://example.photo.aws.com",
                                        "photo": "multipart/form-data"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Influencer data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfluencerInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "Ygona Moura",
                                    "username": "ygona",
                                    "email": "ygona@email.com",
                                    "niches": ["Beleza & Maquiagem", "Lifestyle"],
                                    "reach": "245987",
                                    "photo": "https://new-example.photo.aws.com",
                                    "address": {
                                        "street": "Ipê",
                                        "number": "45",
                                        "zipCode": "12345678",
                                        "city": "Belo Horizonte",
                                        "state": "MG"
                                    },
                                    "createdAt": "2024-09-05T03:29:37.743Z",
                                    "updatedAt": "2024-09-05T03:29:37.743Z"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
            
                                "examples": {
                                    "example1": {
                                        "summary": "aws error",
                                        "value": {
                                            "error": {
                                                "message": "aws message error deleting image",
                                                "code": "aws-s3-bucket.deleteImage",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "aws error",
                                        "value": {
                                            "error": {
                                                "message": "aws error uploading image",
                                                "code": "aws-s3-bucket.uploadImage",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example3": {
                                        "summary": "service error",
                                        "value": {
                                            "error": {
                                                "message": "failed to update influencer data",
                                                "code": "influencer-service.updateInfluencer",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example4": {
                                        "summary": "repository error",
                                        "value": {
                                            "error": {
                                                "message": "could not update influencer details",
                                                "code": "influencer-repository.updateInfluencer",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },

        "/brand/create": {
            "post": {
                "summary": "Create brand",
                "description": "Route to create a new brand.",
                "tags": ["Brand"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {                    
                            "schema": {
                                "$ref": "#/components/schemas/CreateBrand"
                            },
                            "example": {
                                "name": "Glow 4 You",
                                "description": "Period, it's time to shine",
                                "niches": ["Artes", "Beleza & Maquiagem"]
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/BrandInterface"
                                },
                                "example": {
                                "id": "1",
                                "name": "Glow 4 You",
                                "description": "Period, it's time to shine",
                                "niches": ["Artes", "Beleza & Maquiagem"],
                                "createdAt": "2024-09-05T03:29:37.743Z",
                                "updatedAt": "2024-09-05T03:29:37.743Z"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "example1": {
                                        "summary": "invalid field",
                                        "value": {
                                            "error": {
                                                "message": "One or more fields are missing or invalid",
                                                "code": "bad.request",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/Error"
                                },
                                "examples": {
                                    "example1": {
                                        "summary": "field already in use by another brand",
                                        "value": {
                                            "error": {
                                                "message": "['name'] already taken",
                                                "code": "brand-repository.createBrand",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to create brand",
                                            "code": "brand-service.createBrand",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "brand not created",
                                                "code": "brand-repository.createBrand",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/brand/": {
            "get": {
                "summary": "Get all brands",
                "description": "Route to find all brands",
                "tags": ["Brand"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                    "name": "Authorization",
                    "in": "header",
                    "required": true,
                    "description": "Bearer {accesToken}",
                    "schema": {
                        "type": "string"
                    }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brands",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandsArray"
                                },
                                "example": [
                                    {
                                        "id": 1,
                                        "name": "Glow 4 you",
                                        "description": "Period, it's time to shine",
                                        "createdAt": "2024-09-05T03:29:37.743Z",
                                        "updatedAt": "2024-09-05T03:29:37.743Z"
                                    }
                                ]
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
            
                                "examples": {
                                    "example1": {
                                        "summary": "service error",
                                        "value": {
                                            "error": {
                                                "message": "failed to get brands",
                                                "code": "brand-service.findAllBrands",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "repository error",
                                        "value": {
                                            "error": {
                                                "message": "could not get brands",
                                                "code": "brand-repository.findAllBrands",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    } 
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brand/:id": {
            "get": {
                "summary": "Find brand by id",
                "description": "Route to find brand by id.",
                "tags": ["Brand"],
                "security": [
                    {
                    "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {accesToken}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "brand id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand data",
                        "content": {
                            "application/json": {
                                "schema": {
                                "$ref": "#/components/schemas/BrandInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "Glow 4 You",
                                    "description": "Period, it's time to shine",
                                    "niches": ["Beleza & Maquiagem", "Lifestyle"],
                                    "createdAt": "2024-09-05T03:29:37.743Z",
                                    "updatedAt": "2024-09-05T03:29:37.743Z"
                                }                                
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Error"
                            },
            
                            "examples": {
                                "example1": {
                                    "summary": "service error",
                                    "value": {
                                        "error": {
                                            "message": "failed to get brand",
                                            "code": "brand-service.findOneBrand",
                                            "status": true
                                        },
                                        "data": {}
                                    }
                                },
                                "example2": {
                                    "summary": "repository error",
                                    "value": {
                                            "error": {
                                                "message": "could not get brand details",
                                                "code": "brand-repository.findOneBrand",
                                                "status": true
                                                },
                                                "data": {}
                                            }
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        },
        "/brand/:brandId": {
            "patch": {
                "summary": "Update brand",
                "description": "Route to update brand data",
                "tags": ["Brand"],
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "parameters": [
                    {
                        "name": "Authorization",
                        "in": "header",
                        "required": true,
                        "description": "Bearer {token}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "brand id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                            "$ref": "#/components/schemas/UpdateBrand"
                            },
                            "examples": {
                                "example1": {
                                    "summary": "Updating brand description",
                                    "value": {
                                        "description": "Slay!"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Brand data",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BrandInterface"
                                },
                                "example": {
                                    "id": "1",
                                    "name": "Glow 4 You",
                                    "description": "Slay!",
                                    "niches": ["Beleza & Maquiagem", "Lifestyle"],
                                    "createdAt": "2024-09-05T03:29:37.743Z",
                                    "updatedAt": "2024-09-05T03:29:37.743Z"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
                                "example": {
                                    "error": {
                                        "message": "Unauthorized",
                                        "code": "auth-guard.jwtAuth",
                                        "status": true
                                    },
                                    "data": {}
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Error"
                                },
            
                                "examples": {
                                    "example1": {
                                        "summary": "service error",
                                        "value": {
                                            "error": {
                                                "message": "failed to update brand data",
                                                "code": "brand-service.updateBrand",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    },
                                    "example2": {
                                        "summary": "repository error",
                                        "value": {
                                            "error": {
                                                "message": "could not update brand details",
                                                "code": "brand-repository.updateBrand",
                                                "status": true
                                            },
                                            "data": {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    },

    "components": {
        "schemas": {
            "CreateAdmin": {
                "type": "object",
                "properties": {
                "name": {
                    "type": "string",
                    "maxLength": 370,
                    "description": "Admin full name"
                },
                "email": {
                    "type": "string",
                    "maxLength": 250,
                    "description": "Admin e-mail address"
                },
                "password": {
                    "type": "string",
                    "minLength": "7",
                    "pattern": "at least one uppercase letter, one lowercase letter and one number or symbol",
                    "description": "Admin password"
                },
                "passwordConfirmation": {
                    "type": "string",
                    "description": "Password confirmation"
                }
                },
                "required": [
                    "name",
                    "email",
                    "password",
                    "passwordConfirmation"
                ]
            },
            "AdminInterface": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Admin full name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Admin e-mail address"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of user creation"
                    },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date and time of last user update"
                    }
                }
            },
            "AdminInterfaceArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/AdminInterface"
                }
            },
            "UpdateAdmin": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 370,
                        "description": "Admin full name"
                    },
                    "email": {
                        "type": "string",
                        "maxLength": 250,
                        "description": "Admin e-mail address"
                    },
                    "oldPassword": {
                        "type": "string",
                        "description": "Admin old password"
                    },
                    "password": {
                        "type": "string",
                        "minLength": "7",
                        "pattern": "at least one uppercase letter, one lowercase letter and one number or symbol",
                        "description": "Admin password"
                    },
                    "passwordConfirmation": {
                        "type": "string",
                        "description": "Password confirmation"
                    }                
                }
            },

            "UserCredentials": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email address of the user"
                    },
                    "password": {
                        "type": "string",
                        "description": "Password of the user"
                    }
                }
            },
            "UserToken": {
                "type": "object",
                "properties": {
                  "accessToken": {
                    "type": "string",
                    "description": "Access token used for authentication in subsequent API calls. This token should be included in the 'Authorization' header as a 'Bearer accessToken'"
                  }
                }
            },
            "UserPayload": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "User full name"
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the user"
                    }
                }
            },

            "CreateInfluencerBase": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 370,
                        "description": "Influencer full name"
                    },
                    "username": {
                        "type": "string",
                        "description": "Influencer instagram username"
                    },
                    "email": {
                        "type": "string",
                        "maxLength": 250,
                        "description": "Admin e-mail address"
                    },
                    "niches": {
                        "type": "array",
                        "description": "Influencer categories"                
                    },
                    "reach": {
                        "type": "number",
                        "description": "Influencer instagram followers"
                    },
                    "photo": {
                        "type": "string",
                        "description": "Influencer photo (multipart/form-data)",
                        "format": "binary"
                    },
                    "zipCode": {
                        "type": "string",
                        "maxLength": 8,
                        "description": "Influencer zipcode address"
                    },
                    "street": {
                        "type": "string",
                        "description": "Influencer street address"
                    },
                    "number": {
                        "type": "string",
                        "description": "Influencer home address number"
                    }
                }
            },
            "CreateInfluencer": {
                "allOf": [
                    {"$ref": "#/components/schemas/CreateInfluencerBase"},
                    {
                        "required": [
                            "name",
                            "username",
                            "email",
                            "niches",
                            "reach",
                            "zipCode",
                            "street",
                            "number"
                        ]
                    }
                ]
            },
            "InfluencerInterface": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Influencer full name"
                    },
                    "username": {
                        "type": "string",
                        "description": "Influencer instagram username"
                    },
                    "email": {
                        "type": "string",
                        "description": "Admin e-mail address"
                    },
                    "niches": {
                        "type": "array",
                        "description": "Influencer categories"                
                    },
                    "reach": {
                        "type": "number",
                        "description": "Influencer instagram followers"
                    },
                    "photo": {
                        "type": "string",
                        "description": "Influencer url photo from aws"
                    },
                    "address": {
                        "type": "array",
                        "properties": {
                            "street": {
                                "type": "string",
                                "description": "Influencer street address"
                            },
                            "number": {
                                "type": "string",
                                "description": "Influencer home address number"
                            },
                            "zipCode": {
                                "type": "string",
                                "maxLength": 8,
                                "description": "Influencer zipCode address"
                            },
                            "city": {
                                "type": "string",
                                "description": "Influencer city address"
                            },
                            "state": {
                                "type": "string",
                                "description": "Influencer state address"
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of influencer creation"
                    },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date and time of last influencer update"
                    }
                }
            },
            "InfluencerInterfaceArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/InfluencerInterface"
                }
            },
            "Influencer": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "User ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Influencer full name"
                    },
                    "username": {
                        "type": "string",
                        "description": "Influencer instagram username"
                    },
                    "email": {
                        "type": "string",
                        "description": "Admin e-mail address"
                    },
                    "reach": {
                        "type": "number",
                        "description": "Influencer instagram followers"
                    },
                    "photo": {
                        "type": "string",
                        "description": "Influencer url photo from aws"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of influencer creation"
                    },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date and time of last influencer update"
                    }
                }
            },
            "InfluencersArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Influencer"
                }
            },
            "UpdateInfluencer": {
                "allOf": [
                    {"$ref": "#/components/schemas/CreateInfluencerBase"},
                    {
                        "properties": {
                          "oldPhoto": {
                            "type": "string",
                            "description": "old photo aws url"
                          }
                        }
                    }
                ]
            },

            "CreateBrand": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Brand name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brand details"
                    },
                    "niches": {
                        "type": "array",
                        "description": "Brand categories"                
                    }
                },
                "required":  [
                    "name",
                    "description",
                    "niches"
                ]
            },
            "BrandInterface": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Brand ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Brand name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brand details"
                    },
                    "niches": {
                        "type": "array",
                        "description": "Influencer categories"                
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of brand creation"
                    },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date and time of last brand update"
                    }
                }
            },
            "Brand": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Brand ID"
                    },
                    "name": {
                        "type": "string",
                        "description": "Brand name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brand details"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date and time of brand creation"
                    },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date and time of last brand update"
                    }
                }
            },
            "BrandsArray": {
                "type": "array",
                "items": {
                    "$ref": "#/components/schemas/Brand"
                }
            },
            "UpdateBrand": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Brand name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Brand details"
                    },
                    "niches": {
                        "type": "array",
                        "description": "Brand categories"                
                    }
                }
            },

            "Error": {
                "type": "object",
                "properties": {
                    "error": {
                        "type": "object",
                        "properties": {
                            "message": {
                                "type": "string",
                                "description": "Error message"
                            },
                            "code": {
                                "type": "string",
                                "description": "Error code"
                            },
                            "status": {
                                "type": "boolean",
                                "description": "Error status"
                            }
                        }
                    },
                    "data": {
                        "type": "object",
                        "properties": {}
                    }
                }
            }
        },

        "securitySchemes": {
            "BearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    }
}